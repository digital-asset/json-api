# Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load("//bazel_tools:haskell.bzl", "da_haskell_library")
load("//bazel_tools:proto.bzl", "proto_jars")
load(
    "//bazel_tools:scala.bzl",
    "da_scala_library",
    "lf_scalacopts_stricter",
)
load("//daml-lf/language:daml-lf.bzl", "LF_MAJOR_VERSIONS", "PROTO_LF_VERSIONS", "mangle_for_java", "versions")

[
    [
        filegroup(
            name = "daml_lf_%s_archive_proto_srcs" % version,
            srcs = glob([
                "src/{directory}/protobuf/com/daml/daml_lf_{version}/*.proto".format(
                    directory = directory,
                    version = mangled_version,
                ),
            ]),
        ),
        proto_jars(
            name = "daml_lf_%s_archive_proto" % version,
            srcs = [":daml_lf_%s_archive_proto_srcs" % version],
            javadoc_root_packages = ["com.daml.daml_lf_%s" % mangled_version],
            maven_artifact_prefix = "daml-lf-%s-archive" % short_version,
            maven_group = "com.daml",
            strip_import_prefix = "src/%s/protobuf" % directory,
            visibility = ["//visibility:public"],
        ),
    ]
    for version in PROTO_LF_VERSIONS
    for short_version in ["dev" if version == "1.dev" else version]
    for mangled_version in [mangle_for_java(short_version)]
    for directory in ["main" if version == "1.dev" else "stable"]
]

# FIXME(JM): Clean this up
genrule(
    name = "daml_lf_dev_archive_haskell_proto_src",
    srcs = ["daml_lf_1.dev_archive_proto_srcs"],
    outs = ["Com/Daml/DamlLfDev/DamlLf.hs"] +
           ["Com/Daml/DamlLfDev/DamlLf%s.hs" % v.title() for v in LF_MAJOR_VERSIONS],
    cmd =
        "\n".join(
            [
                """
                   $(location @proto3-suite//:compile-proto-file)  \
                     --includeDir daml-lf/archive/src/main/protobuf/        \
                     --proto com/daml/daml_lf_dev/daml_lf%s.proto   \
                     --out $(@D)
                 """ % vx
                for vx in [""] + ["_%s" % v for v in LF_MAJOR_VERSIONS]
            ],
        ),
    tools = [
        "@proto3-suite//:compile-proto-file",
    ],
)

da_haskell_library(
    name = "daml_lf_dev_archive_haskell_proto",
    srcs = [":daml_lf_dev_archive_haskell_proto_src"],
    compiler_flags = [
        "-O0",
    ],  # disable optimization as this is otherwise way too slow to compile.
    hackage_deps = [
        "base",
        "bytestring",
        "containers",
        "deepseq",
        "proto3-suite",
        "proto3-wire",
        "text",
        "vector",
    ],
    visibility = ["//visibility:public"],
)

da_scala_library(
    name = "daml_lf_archive_reader",
    srcs = glob(["src/main/scala/**/*.scala"]),
    scala_deps = [
        "@maven//:org_scalaz_scalaz_core",
    ],
    scalacopts = lf_scalacopts_stricter,
    tags = ["maven_coordinates=com.daml:daml-lf-archive-reader:__VERSION__"],
    visibility = ["//visibility:public"],
    deps = [
        ":daml_lf_1.dev_archive_proto_java",
        "//daml-lf/data",
        "//daml-lf/language",
        "//libs-scala/crypto",
        "//libs-scala/nameof",
        "//libs-scala/scala-utils",
        "@maven//:com_google_protobuf_protobuf_java",
    ],
)
