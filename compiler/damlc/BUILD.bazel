# Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

load("//bazel_tools:haskell.bzl", "da_haskell_binary", "da_haskell_library", "da_haskell_repl", "da_haskell_test")
load("@os_info//:os_info.bzl", "is_windows")
load("//bazel_tools/runfiles:defs.bzl", "add_data")
load(":util.bzl", "ghc_pkg")

damlc_data = [
    "//compiler/damlc/daml-ide-core:dlint.yaml",
    "@static_asset_d3plus//:js/d3.min.js",
    "@static_asset_d3plus//:js/d3plus.min.js",
    ghc_pkg,
    "//compiler/damlc:ghcversion",
    "@stackage-exe//hpp",
    "//compiler/damlc/pkg-db",
    "//compiler/damlc/stable-packages",
    "//compiler/repl-service/server:repl_service_jar",
    "//compiler/scenario-service/server:scenario_service_jar",
]

add_data(
    name = "damlc-compile-only",
    data = [
        ghc_pkg,
        "//compiler/damlc:ghcversion",
        "//compiler/damlc/pkg-db",
        "@stackage-exe//hpp",
    ],
    executable = ":damlc-bootstrap",
    visibility = ["//visibility:public"],
)

add_data(
    name = "damlc",
    data = damlc_data,
    executable = ":damlc-bootstrap",
    visibility = ["//visibility:public"],
)

genrule(
    name = "ghcversion",
    srcs = [],
    outs = ["ghcversion.h"],
    cmd = """
        echo > $(OUTS)
    """,
    tools = [],
    visibility = ["//visibility:public"],
)

# damlc without runfiles. We use that to build the daml-prim and daml-stdlib
# package databases.
da_haskell_binary(
    name = "damlc-bootstrap",
    srcs = ["exe/Main.hs"],

    # We need to tell the linker to statically link pthread on Windows
    # otherwise the library is not found at runtime.
    compiler_flags = [
        "-optl-static",
        "-optl-pthread",
    ] if is_windows else [],
    data = [
        "//compiler/damlc:ghcversion",
        "//compiler/damlc/stable-packages",
        "@stackage-exe//hpp",
    ],
    hackage_deps = [
        "base",
    ],
    src_strip_prefix = "exe",
    visibility = ["//visibility:public"],
    deps = [
        ":damlc-lib",
    ],
)

da_haskell_library(
    name = "damlc-lib",
    srcs = glob(["lib/**/*.hs"]),
    extra_srcs = [
        "//:NOTICES",
    ],
    hackage_deps = [
        "aeson",
        "aeson-pretty",
        "ansi-wl-pprint",
        "base",
        "base64",
        "base64-bytestring",
        "bytestring",
        "containers",
        "cryptonite",
        "data-default",
        "directory",
        "either",
        "extra",
        "file-embed",
        "filepath",
        "ghcide",
        "ghc-lib",
        "ghc-lib-parser",
        "gitrev",
        "lsp",
        "lsp-types",
        "lens",
        "lens-aeson",
        "memory",
        "mtl",
        "network",
        "optparse-applicative",
        "prettyprinter",
        "process",
        "proto3-suite",
        "safe",
        "safe-exceptions",
        "shake",
        "split",
        "tasty",
        "tasty-ant-xml",
        "tasty-hunit",
        "temporary",
        "text",
        "transformers",
        "uniplate",
        "unordered-containers",
        "utf8-string",
        "vector",
        "xml",
        "yaml",
        "zip",
        "zip-archive",
    ] + ([] if is_windows else ["unix"]),
    src_strip_prefix = "lib",
    visibility = ["//visibility:public"],
    deps = [
        "//:sdk-version-hs-lib",
        "//compiler/daml-lf-ast",
        "//compiler/daml-lf-proto",
        "//compiler/daml-lf-reader",
        "//compiler/daml-lf-tools",
        "//compiler/damlc/daml-compiler",
        "//compiler/damlc/daml-desugar",
        "//compiler/damlc/daml-doc",
        "//compiler/damlc/daml-ide",
        "//compiler/damlc/daml-ide-core",
        "//compiler/damlc/daml-lf-conversion",
        "//compiler/damlc/daml-opts",
        "//compiler/damlc/daml-opts:daml-opts-types",
        "//compiler/damlc/daml-package-config",
        "//compiler/damlc/daml-rule-types",
        "//compiler/damlc/daml-visual",
        "//compiler/repl-service/client",
        "//compiler/scenario-service/client",
        "//compiler/scenario-service/protos:scenario_service_haskell_proto",
        "//daml-assistant:daml-project-config",
        "//daml-assistant/daml-helper:daml-helper-lib",
        "//daml-lf/archive:daml_lf_dev_archive_haskell_proto",
        "//libs-haskell/bazel-runfiles",
        "//libs-haskell/da-hs-base",
    ],
)
